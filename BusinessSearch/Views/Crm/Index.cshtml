@model BusinessSearch.Models.ViewModels.CrmListIndexViewModel
@using BusinessSearch.Models.Organization
@inject Microsoft.AspNetCore.Identity.UserManager<BusinessSearch.Models.ApplicationUser> UserManager

@{
    ViewData["Title"] = "CRM Lists";
    var currentUser = ViewBag.CurrentUser as BusinessSearch.Models.ApplicationUser;
    var isAdmin = currentUser?.OrganizationRole == OrganizationRole.Admin;
    var isMember = currentUser?.OrganizationRole == OrganizationRole.Member;
    var isCaller = currentUser?.OrganizationRole == OrganizationRole.Caller;
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2>
                    <i class="fas fa-list-alt"></i> CRM Lists
                    @if (isCaller)
                    {
                        <small class="text-muted">(Assigned Lists Only)</small>
                    }
                </h2>
                
                @if (isAdmin || isMember)
                {
                    <button class="btn btn-primary" onclick="showCreateListModal()">
                        <i class="fas fa-plus"></i> Create New List
                    </button>
                }
            </div>

            <!-- Search and Filter Row -->
            <div class="row mb-3">
                <div class="col-md-4">
                    <div class="input-group">
                        <input type="text" class="form-control" id="searchInput" 
                               placeholder="Search lists..." value="@Model.SearchTerm">
                        <button class="btn btn-outline-secondary" type="button" onclick="searchLists()">
                            <i class="fas fa-search"></i>
                        </button>
                    </div>
                </div>
                <div class="col-md-3">
                    <select class="form-select" id="industryFilter">
                        <option value="">All Industries</option>
                        @foreach (var industry in Model.Lists.Where(l => !string.IsNullOrEmpty(l.Industry))
                                                            .Select(l => l.Industry).Distinct().OrderBy(i => i))
                        {
                            <option value="@industry" @@(Model.IndustryFilter == industry ? "selected" : "")>
                                @industry
                            </option>
                        }
                    </select>
                </div>
                <div class="col-md-3">
                    <select class="form-select" id="assignedToFilter">
                        <option value="">All Assignments</option>
                        @foreach (var member in Model.TeamMembers.OrderBy(m => m.Name))
                        {
                            <option value="@member.Id" @@(Model.AssignedToFilter == member.Id ? "selected" : "")>
                                @member.Name
                            </option>
                        }
                    </select>
                </div>
                <div class="col-md-2">
                    <button class="btn btn-secondary w-100" onclick="clearFilters()">
                        <i class="fas fa-times"></i> Clear
                    </button>
                </div>
            </div>

            <!-- Lists Table -->
            <div class="card">
                <div class="card-body">
                    @if (Model.Lists.Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead class="table-light">
                                    <tr>
                                        <th>
                                            <a href="?sortColumn=name&sortDirection=@(ViewContext.HttpContext.Request.Query["sortDirection"] == "asc" ? "desc" : "asc")" 
                                               class="text-decoration-none">
                                                List Name
                                                <i class="fas fa-sort"></i>
                                            </a>
                                        </th>
                                        <th>Description</th>
                                        <th>
                                            <a href="?sortColumn=industry&sortDirection=@(ViewContext.HttpContext.Request.Query["sortDirection"] == "asc" ? "desc" : "asc")" 
                                               class="text-decoration-none">
                                                Industry
                                                <i class="fas fa-sort"></i>
                                            </a>
                                        </th>
                                        <th>
                                            <a href="?sortColumn=assignedto&sortDirection=@(ViewContext.HttpContext.Request.Query["sortDirection"] == "asc" ? "desc" : "asc")" 
                                               class="text-decoration-none">
                                                Assigned To
                                                <i class="fas fa-sort"></i>
                                            </a>
                                        </th>
                                        <th>
                                            <a href="?sortColumn=entrycount&sortDirection=@(ViewContext.HttpContext.Request.Query["sortDirection"] == "asc" ? "desc" : "asc")" 
                                               class="text-decoration-none">
                                                Entries
                                                <i class="fas fa-sort"></i>
                                            </a>
                                        </th>
                                        <th>
                                            <a href="?sortColumn=createddate&sortDirection=@(ViewContext.HttpContext.Request.Query["sortDirection"] == "asc" ? "desc" : "asc")" 
                                               class="text-decoration-none">
                                                Created
                                                <i class="fas fa-sort"></i>
                                            </a>
                                        </th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var list in Model.Lists)
                                    {
                                        <tr>
                                            <td>
                                                <strong>@list.Name</strong>
                                            </td>
                                            <td>
                                                <small class="text-muted">@(list.Description ?? "No description")</small>
                                            </td>
                                            <td>
                                                @if (!string.IsNullOrEmpty(list.Industry))
                                                {
                                                    <span class="badge bg-secondary">@list.Industry</span>
                                                }
                                            </td>
                                            <td>
                                                @if (list.AssignedTo != null)
                                                {
                                                    <span class="badge bg-info text-dark">@list.AssignedTo.Name</span>
                                                }
                                                else
                                                {
                                                    <span class="text-muted">Unassigned</span>
                                                }
                                            </td>
                                            <td>
                                                <span class="badge bg-primary">@list.EntryCount</span>
                                            </td>
                                            <td>
                                                <small>@list.CreatedDate.ToString("MM/dd/yyyy")</small>
                                            </td>
                                            <td>
                                                <div class="btn-group btn-group-sm" role="group">
                                                    <a href="@Url.Action("ListView", new { id = list.Id })" 
                                                       class="btn btn-outline-primary" title="View List">
                                                        <i class="fas fa-eye"></i>
                                                    </a>
                                                    
                                                    @if (isAdmin || isMember)
                                                    {
                                                        <button class="btn btn-outline-secondary" 
                                                                onclick="editList(@list.Id)" title="Edit List">
                                                            <i class="fas fa-edit"></i>
                                                        </button>
                                                        <button class="btn btn-outline-danger" 
                                                                onclick="deleteList(@list.Id)" title="Delete List">
                                                            <i class="fas fa-trash"></i>
                                                        </button>
                                                    }
                                                    else if (isCaller)
                                                    {
                                                        <span class="btn btn-outline-secondary disabled" title="View Only">
                                                            <i class="fas fa-lock"></i>
                                                        </span>
                                                    }
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>

                        <!-- Pagination -->
                        @if (Model.TotalPages > 1)
                        {
                            <nav aria-label="Page navigation">
                                <ul class="pagination justify-content-center">
                                    @if (Model.CurrentPage > 1)
                                    {
                                        <li class="page-item">
                                            <a class="page-link" href="?page=@(Model.CurrentPage - 1)&pageSize=@Model.PageSize">Previous</a>
                                        </li>
                                    }

                                    @for (int i = Math.Max(1, Model.CurrentPage - 2); i <= Math.Min(Model.TotalPages, Model.CurrentPage + 2); i++)
                                    {
                                        <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                                            <a class="page-link" href="?page=@i&pageSize=@Model.PageSize">@i</a>
                                        </li>
                                    }

                                    @if (Model.CurrentPage < Model.TotalPages)
                                    {
                                        <li class="page-item">
                                            <a class="page-link" href="?page=@(Model.CurrentPage + 1)&pageSize=@Model.PageSize">Next</a>
                                        </li>
                                    }
                                </ul>
                            </nav>

                            <div class="text-center mt-3">
                                <small class="text-muted">
                                    Showing @((Model.CurrentPage - 1) * Model.PageSize + 1) to 
                                    @Math.Min(Model.CurrentPage * Model.PageSize, Model.TotalItems) 
                                    of @Model.TotalItems lists
                                </small>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="text-center py-5">
                            <i class="fas fa-list-alt fa-4x text-muted mb-3"></i>
                            <h4 class="text-muted">No lists found</h4>
                            <p class="text-muted">
                                @if (isCaller)
                                {
                                    <text>No lists have been assigned to you yet.</text>
                                }
                                else
                                {
                                    <text>Create your first list to get started.</text>
                                }
                            </p>
                            @if (isAdmin || isMember)
                            {
                                <button class="btn btn-primary" onclick="showCreateListModal()">
                                    <i class="fas fa-plus"></i> Create New List
                                </button>
                            }
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@if (isAdmin || isMember)
{
    <!-- Create List Modal -->
    <div class="modal fade" id="createListModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Create New List</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="createListForm">
                        <div class="mb-3">
                            <label for="listName" class="form-label">List Name *</label>
                            <input type="text" class="form-control" id="listName" required>
                        </div>
                        <div class="mb-3">
                            <label for="listDescription" class="form-label">Description</label>
                            <textarea class="form-control" id="listDescription" rows="3"></textarea>
                        </div>
                        <div class="mb-3">
                            <label for="listIndustry" class="form-label">Industry</label>
                            <input type="text" class="form-control" id="listIndustry">
                        </div>
                        <div class="mb-3">
                            <label for="listAssignedTo" class="form-label">Assigned To</label>
                            <select class="form-select" id="listAssignedTo">
                                <option value="">Unassigned</option>
                                @foreach (var member in Model.TeamMembers.OrderBy(m => m.Name))
                                {
                                    <option value="@member.Id">@member.Name</option>
                                }
                            </select>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" onclick="createList()">Create List</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Edit List Modal -->
    <div class="modal fade" id="editListModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Edit List</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="editListForm">
                        <input type="hidden" id="editListId">
                        <div class="mb-3">
                            <label for="editListName" class="form-label">List Name *</label>
                            <input type="text" class="form-control" id="editListName" required>
                        </div>
                        <div class="mb-3">
                            <label for="editListDescription" class="form-label">Description</label>
                            <textarea class="form-control" id="editListDescription" rows="3"></textarea>
                        </div>
                        <div class="mb-3">
                            <label for="editListIndustry" class="form-label">Industry</label>
                            <input type="text" class="form-control" id="editListIndustry">
                        </div>
                        <div class="mb-3">
                            <label for="editListAssignedTo" class="form-label">Assigned To</label>
                            <select class="form-select" id="editListAssignedTo">
                                <option value="">Unassigned</option>
                                @foreach (var member in Model.TeamMembers.OrderBy(m => m.Name))
                                {
                                    <option value="@member.Id">@member.Name</option>
                                }
                            </select>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" onclick="updateList()">Update List</button>
                </div>
            </div>
        </div>
    </div>
}

@Html.AntiForgeryToken()

@section Scripts {
    <script>
        // Search and Filter Functions
        function searchLists() {
            const searchTerm = document.getElementById('searchInput').value;
            const industry = document.getElementById('industryFilter').value;
            const assignedTo = document.getElementById('assignedToFilter').value;
            
            const params = new URLSearchParams();
            if (searchTerm) params.append('searchTerm', searchTerm);
            if (industry) params.append('industryFilter', industry);
            if (assignedTo) params.append('assignedToFilter', assignedTo);
            
            window.location.href = '?' + params.toString();
        }

        function clearFilters() {
            window.location.href = window.location.pathname;
        }

        // Event listeners for filter changes
        document.getElementById('industryFilter').addEventListener('change', searchLists);
        document.getElementById('assignedToFilter').addEventListener('change', searchLists);
        
        // Enter key search
        document.getElementById('searchInput').addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                e.preventDefault();
                searchLists();
            }
        });

        @if (isAdmin || isMember)
        {
            <text>
            // List Management Functions
            function showCreateListModal() {
                document.getElementById('createListForm').reset();
                new bootstrap.Modal(document.getElementById('createListModal')).show();
            }

            function createList() {
                const name = document.getElementById('listName').value.trim();
                const description = document.getElementById('listDescription').value.trim();
                const industry = document.getElementById('listIndustry').value.trim();
                const assignedToId = document.getElementById('listAssignedTo').value || null;

                if (!name) {
                    alert('Please enter a list name');
                    return;
                }

                const data = {
                    name: name,
                    description: description,
                    industry: industry,
                    assignedToId: assignedToId
                };

                fetch('@Url.Action("CreateList", "Crm")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify(data)
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        bootstrap.Modal.getInstance(document.getElementById('createListModal')).hide();
                        location.reload();
                    } else {
                        alert('Error creating list: ' + data.message);
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('An error occurred while creating the list');
                });
            }

            function editList(listId) {
                // Fetch list details and populate edit modal
                fetch(`@Url.Action("GetListDetails", "Crm")?id=${listId}`)
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        document.getElementById('editListId').value = data.list.id;
                        document.getElementById('editListName').value = data.list.name;
                        document.getElementById('editListDescription').value = data.list.description || '';
                        document.getElementById('editListIndustry').value = data.list.industry || '';
                        
                        // Handle assignedToId - need to convert User ID back to TeamMember ID for display
                        const assignedToSelect = document.getElementById('editListAssignedTo');
                        if (data.list.assignedToId) {
                            // Find the TeamMember ID that corresponds to this User ID
                            // This requires checking which team member has this user ID
                            const userId = data.list.assignedToId;
                            // For now, set it directly - you may need to adjust this logic
                            assignedToSelect.value = userId;
                        } else {
                            assignedToSelect.value = '';
                        }
                        
                        new bootstrap.Modal(document.getElementById('editListModal')).show();
                    } else {
                        alert('Error loading list details: ' + data.message);
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('An error occurred while loading list details');
                });
            }

            function updateList() {
                const id = document.getElementById('editListId').value;
                const name = document.getElementById('editListName').value.trim();
                const description = document.getElementById('editListDescription').value.trim();
                const industry = document.getElementById('editListIndustry').value.trim();
                const assignedToId = document.getElementById('editListAssignedTo').value;

                if (!name) {
                    alert('Please enter a list name');
                    return;
                }

                const formData = new FormData();
                formData.append('id', id);
                formData.append('name', name);
                formData.append('description', description);
                formData.append('industry', industry);
                formData.append('assignedToId', assignedToId);
                formData.append('__RequestVerificationToken', document.querySelector('input[name="__RequestVerificationToken"]').value);

                fetch('@Url.Action("UpdateListFull", "Crm")', {
                    method: 'POST',
                    body: formData
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        bootstrap.Modal.getInstance(document.getElementById('editListModal')).hide();
                        location.reload();
                    } else {
                        alert('Error updating list: ' + data.message);
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('An error occurred while updating the list');
                });
            }

            function deleteList(listId) {
                if (!confirm('Are you sure you want to delete this list? This action cannot be undone.')) {
                    return;
                }

                const formData = new FormData();
                formData.append('id', listId);
                formData.append('__RequestVerificationToken', document.querySelector('input[name="__RequestVerificationToken"]').value);

                fetch('@Url.Action("DeleteList", "Crm")', {
                    method: 'POST',
                    body: formData
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        location.reload();
                    } else {
                        alert('Error deleting list: ' + data.message);
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('An error occurred while deleting the list');
                });
            }

            // Function to load available lists for "Add to CRM" modal (for search results)
            function loadAvailableLists(selectElementId) {
                fetch('/Crm/GetAvailableListsForAdd')
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        const selectElement = document.getElementById(selectElementId);
                        if (selectElement) {
                            // Clear existing options except the first "Choose a list..." option
                            selectElement.innerHTML = '<option value="">Choose a list...</option>';
                            
                            // Add lists
                            data.lists.forEach(list => {
                                const option = document.createElement('option');
                                option.value = list.id;
                                option.textContent = list.name;
                                selectElement.appendChild(option);
                            });

                            // Add "Create New List" option
                            const createOption = document.createElement('option');
                            createOption.value = 'CREATE_NEW';
                            createOption.textContent = '+ Create New List';
                            selectElement.appendChild(createOption);
                        }
                    } else {
                        console.error('Failed to load lists:', data.message);
                    }
                })
                .catch(error => {
                    console.error('Error loading lists:', error);
                });
            }

            // Expose function globally for use in other pages
            window.loadAvailableLists = loadAvailableLists;
            </text>
        }
    </script>
}