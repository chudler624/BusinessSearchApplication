@model BusinessSearch.Models.ViewModels.TemplatesScriptsViewModel

<div class="container py-4" @Html.AntiForgeryToken()>
    <div class="card shadow-sm border-0 rounded-3">
        <div class="card-body p-4">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2 class="fw-bold mb-0">Templates & Scripts</h2>
                <div class="btn-group" role="group">
                    <button class="btn btn-primary rounded-pill px-4 me-2" onclick="showCreateEmailTemplateModal()">
                        <i class="fas fa-plus me-2"></i>New Email Template
                    </button>
                    <button class="btn btn-success rounded-pill px-4" onclick="showCreateCallScriptModal()">
                        <i class="fas fa-plus me-2"></i>New Call Script
                    </button>
                </div>
            </div>

            <!-- Filters Section -->
            <div class="card bg-light border-0 rounded-3 mb-4">
                <div class="card-body p-4">
                    <h5 class="fw-bold mb-3">Filters</h5>
                    <div class="row g-3">
                        <div class="col-md-6">
                            <label class="form-label fw-medium">Search</label>
                            <div class="input-group">
                                <span class="input-group-text border-0 bg-white rounded-start-pill">
                                    <i class="fas fa-search"></i>
                                </span>
                                <input type="text" id="searchInput" class="form-control form-control-lg border-0 bg-white rounded-end-pill"
                                       placeholder="Search templates and scripts..."
                                       value="@Model.SearchTerm">
                            </div>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label fw-medium">Category/Type</label>
                            <select id="categoryFilter" class="form-select form-control-lg border-0 bg-white rounded-pill">
                                <option value="">All Categories/Types</option>
                                <!-- Categories will be populated via JavaScript based on active tab -->
                            </select>
                        </div>
                        <div class="col-md-3 d-flex align-items-end">
                            <button class="btn btn-outline-secondary rounded-pill px-4 w-100" onclick="resetFilters()">
                                <i class="fas fa-undo me-2"></i>Reset
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Tabs -->
            <ul class="nav nav-pills nav-fill mb-4" id="templatesScriptsTabs" role="tablist">
                <li class="nav-item" role="presentation">
                    <button class="nav-link @(Model.ActiveTab == "email-templates" ? "active" : "")"
                            id="email-templates-tab" data-bs-toggle="pill" data-bs-target="#email-templates"
                            type="button" role="tab">
                        <i class="fas fa-envelope me-2"></i>Email Templates (@Model.EmailTemplates.Count)
                    </button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link @(Model.ActiveTab == "call-scripts" ? "active" : "")"
                            id="call-scripts-tab" data-bs-toggle="pill" data-bs-target="#call-scripts"
                            type="button" role="tab">
                        <i class="fas fa-phone me-2"></i>Call Scripts (@Model.CallScripts.Count)
                    </button>
                </li>
            </ul>

            <!-- Tab Content -->
            <div class="tab-content" id="templatesScriptsTabContent">
                <!-- Email Templates Tab -->
                <div class="tab-pane fade @(Model.ActiveTab == "email-templates" ? "show active" : "")"
                     id="email-templates" role="tabpanel">
                    <div class="card border-0 shadow-sm rounded-3">
                        <div class="card-body p-0">
                            <div class="table-responsive">
                                <table class="table table-hover align-middle mb-0">
                                    <thead class="table-light">
                                        <tr>
                                            <th class="px-4 py-3">Template Name</th>
                                            <th class="py-3">Subject</th>
                                            <th class="py-3">Category</th>
                                            <th class="py-3">Created</th>
                                            <th class="text-end pe-4 py-3">Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @if (!Model.EmailTemplates.Any())
                                        {
                                            <tr>
                                                <td colspan="5" class="text-center py-5">
                                                    <div class="text-muted mb-3">
                                                        <i class="fas fa-envelope-open fa-3x opacity-50"></i>
                                                    </div>
                                                    <p class="mb-2">No email templates found</p>
                                                    <small class="text-muted">Create your first template to get started</small>
                                                </td>
                                            </tr>
                                        }
                                        else
                                        {
                                            @foreach (var template in Model.EmailTemplates)
                                            {
                                                <tr>
                                                    <td class="px-4 py-3">
                                                        <div>
                                                            <div class="fw-medium">@template.Name</div>
                                                            @if (!string.IsNullOrEmpty(template.Description))
                                                            {
                                                                <small class="text-muted">@template.Description</small>
                                                            }
                                                        </div>
                                                    </td>
                                                    <td class="py-3">
                                                        <span class="text-truncate d-inline-block" style="max-width: 200px;" title="@template.Subject">
                                                            @template.Subject
                                                        </span>
                                                    </td>
                                                    <td class="py-3">
                                                        @if (!string.IsNullOrEmpty(template.Category))
                                                        {
                                                            <span class="badge bg-primary bg-opacity-10 text-primary rounded-pill px-3">@template.Category</span>
                                                        }
                                                        else
                                                        {
                                                            <span class="text-muted">-</span>
                                                        }
                                                    </td>
                                                    <td class="py-3">@template.CreatedDate.ToString("MM/dd/yyyy")</td>
                                                    <td class="text-end pe-4 py-3">
                                                        <div class="btn-group" role="group">
                                                            <button class="btn btn-sm btn-outline-info rounded-start-pill px-3"
                                                                    onclick="viewEmailTemplate(@template.Id)" title="View Template">
                                                                <i class="fas fa-eye me-1"></i> View
                                                            </button>
                                                            <a asp-action="EditEmailTemplate" asp-route-id="@template.Id"
                                                               class="btn btn-sm btn-outline-warning px-3" title="Edit Template">
                                                                <i class="fas fa-edit me-1"></i> Edit
                                                            </a>
                                                            <button class="btn btn-sm btn-outline-danger rounded-end-pill px-3"
                                                                    onclick="confirmDeleteEmailTemplate(@template.Id, '@template.Name')" title="Delete Template">
                                                                <i class="fas fa-trash me-1"></i> Delete
                                                            </button>
                                                        </div>
                                                    </td>
                                                </tr>
                                            }
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Call Scripts Tab -->
                <div class="tab-pane fade @(Model.ActiveTab == "call-scripts" ? "show active" : "")"
                     id="call-scripts" role="tabpanel">
                    <div class="card border-0 shadow-sm rounded-3">
                        <div class="card-body p-0">
                            <div class="table-responsive">
                                <table class="table table-hover align-middle mb-0">
                                    <thead class="table-light">
                                        <tr>
                                            <th class="px-4 py-3">Script Name</th>
                                            <th class="py-3">Type</th>
                                            <th class="py-3">Industry</th>
                                            <th class="py-3">Duration</th>
                                            <th class="py-3">Created</th>
                                            <th class="text-end pe-4 py-3">Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @if (!Model.CallScripts.Any())
                                        {
                                            <tr>
                                                <td colspan="6" class="text-center py-5">
                                                    <div class="text-muted mb-3">
                                                        <i class="fas fa-phone fa-3x opacity-50"></i>
                                                    </div>
                                                    <p class="mb-2">No call scripts found</p>
                                                    <small class="text-muted">Create your first script to get started</small>
                                                </td>
                                            </tr>
                                        }
                                        else
                                        {
                                            @foreach (var script in Model.CallScripts)
                                            {
                                                <tr>
                                                    <td class="px-4 py-3">
                                                        <div>
                                                            <div class="fw-medium">@script.Name</div>
                                                            @if (!string.IsNullOrEmpty(script.Description))
                                                            {
                                                                <small class="text-muted">@script.Description</small>
                                                            }
                                                        </div>
                                                    </td>
                                                    <td class="py-3">
                                                        @if (!string.IsNullOrEmpty(script.ScriptType))
                                                        {
                                                            <span class="badge bg-success bg-opacity-10 text-success rounded-pill px-3">@script.ScriptType</span>
                                                        }
                                                        else
                                                        {
                                                            <span class="text-muted">-</span>
                                                        }
                                                    </td>
                                                    <td class="py-3">
                                                        @if (!string.IsNullOrEmpty(script.Industry))
                                                        {
                                                            <span class="badge bg-light text-dark rounded-pill px-3">@script.Industry</span>
                                                        }
                                                        else
                                                        {
                                                            <span class="text-muted">-</span>
                                                        }
                                                    </td>
                                                    <td class="py-3">
                                                        @if (script.EstimatedDuration.HasValue)
                                                        {
                                                            <span class="text-muted">@script.EstimatedDuration min</span>
                                                        }
                                                        else
                                                        {
                                                            <span class="text-muted">-</span>
                                                        }
                                                    </td>
                                                    <td class="py-3">@script.CreatedDate.ToString("MM/dd/yyyy")</td>
                                                    <td class="text-end pe-4 py-3">
                                                        <div class="btn-group" role="group">
                                                            <button class="btn btn-sm btn-outline-info rounded-start-pill px-3"
                                                                    onclick="viewCallScript(@script.Id)" title="View Script">
                                                                <i class="fas fa-eye me-1"></i> View
                                                            </button>
                                                            <a asp-action="EditCallScript" asp-route-id="@script.Id"
                                                               class="btn btn-sm btn-outline-warning px-3" title="Edit Script">
                                                                <i class="fas fa-edit me-1"></i> Edit
                                                            </a>
                                                            <button class="btn btn-sm btn-outline-danger rounded-end-pill px-3"
                                                                    onclick="confirmDeleteCallScript(@script.Id, '@script.Name')" title="Delete Script">
                                                                <i class="fas fa-trash me-1"></i> Delete
                                                            </button>
                                                        </div>
                                                    </td>
                                                </tr>
                                            }
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Create Email Template Modal -->
<div class="modal fade" id="createEmailTemplateModal" tabindex="-1">
    <div class="modal-dialog modal-lg modal-dialog-centered">
        <div class="modal-content border-0 shadow">
            <div class="modal-header border-0">
                <h5 class="modal-title fw-bold">Create Email Template</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body p-4">
                <form id="createEmailTemplateForm">
                    <div class="row g-3">
                        <div class="col-md-8">
                            <label class="form-label required fw-medium">Template Name</label>
                            <input type="text" class="form-control form-control-lg border-0 bg-light rounded-pill" id="emailTemplateName" required maxlength="100">
                        </div>
                        <div class="col-md-4">
                            <label class="form-label fw-medium">Category</label>
                            <input type="text" class="form-control form-control-lg border-0 bg-light rounded-pill" id="emailTemplateCategory" maxlength="50">
                        </div>
                        <div class="col-12">
                            <label class="form-label fw-medium">Description</label>
                            <textarea class="form-control border-0 bg-light rounded-3" id="emailTemplateDescription" rows="2" maxlength="500"></textarea>
                        </div>
                        <div class="col-12">
                            <label class="form-label required fw-medium">Subject</label>
                            <input type="text" class="form-control form-control-lg border-0 bg-light rounded-pill" id="emailTemplateSubject" required maxlength="200">
                        </div>
                        <div class="col-12">
                            <label class="form-label required fw-medium">Email Body</label>
                            <textarea class="form-control border-0 bg-light rounded-3" id="emailTemplateBody" rows="10" required></textarea>
                        </div>
                        <div class="col-12">
                            <label class="form-label fw-medium">Tags</label>
                            <input type="text" class="form-control form-control-lg border-0 bg-light rounded-pill" id="emailTemplateTags" maxlength="100" placeholder="Comma-separated tags">
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer border-0">
                <button type="button" class="btn btn-light rounded-pill px-4" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary rounded-pill px-4" onclick="createEmailTemplate()">
                    <i class="fas fa-plus me-2"></i>Create Template
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Create Call Script Modal -->
<div class="modal fade" id="createCallScriptModal" tabindex="-1">
    <div class="modal-dialog modal-lg modal-dialog-centered">
        <div class="modal-content border-0 shadow">
            <div class="modal-header border-0">
                <h5 class="modal-title fw-bold">Create Call Script</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body p-4">
                <form id="createCallScriptForm">
                    <div class="row g-3">
                        <div class="col-md-6">
                            <label class="form-label required fw-medium">Script Name</label>
                            <input type="text" class="form-control form-control-lg border-0 bg-light rounded-pill" id="callScriptName" required maxlength="100">
                        </div>
                        <div class="col-md-3">
                            <label class="form-label fw-medium">Type</label>
                            <input type="text" class="form-control form-control-lg border-0 bg-light rounded-pill" id="callScriptType" maxlength="50" placeholder="e.g., Cold Call">
                        </div>
                        <div class="col-md-3">
                            <label class="form-label fw-medium">Duration (min)</label>
                            <input type="number" class="form-control form-control-lg border-0 bg-light rounded-pill" id="callScriptDuration" min="1" max="60">
                        </div>
                        <div class="col-md-6">
                            <label class="form-label fw-medium">Industry</label>
                            <input type="text" class="form-control form-control-lg border-0 bg-light rounded-pill" id="callScriptIndustry" maxlength="50">
                        </div>
                        <div class="col-md-6">
                            <label class="form-label fw-medium">Tags</label>
                            <input type="text" class="form-control form-control-lg border-0 bg-light rounded-pill" id="callScriptTags" maxlength="100" placeholder="Comma-separated tags">
                        </div>
                        <div class="col-12">
                            <label class="form-label fw-medium">Description</label>
                            <textarea class="form-control border-0 bg-light rounded-3" id="callScriptDescription" rows="2" maxlength="500"></textarea>
                        </div>
                        <div class="col-12">
                            <label class="form-label required fw-medium">Script Content</label>
                            <textarea class="form-control border-0 bg-light rounded-3" id="callScriptContent" rows="12" required></textarea>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer border-0">
                <button type="button" class="btn btn-light rounded-pill px-4" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-success rounded-pill px-4" onclick="createCallScript()">
                    <i class="fas fa-plus me-2"></i>Create Script
                </button>
            </div>
        </div>
    </div>
</div>

<!-- View Email Template Modal -->
<div class="modal fade" id="viewEmailTemplateModal" tabindex="-1">
    <div class="modal-dialog modal-lg modal-dialog-centered">
        <div class="modal-content border-0 shadow">
            <div class="modal-header border-0">
                <h5 class="modal-title fw-bold" id="viewEmailTemplateTitle"></h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body p-4">
                <div id="viewEmailTemplateContent">
                    <!-- Content will be loaded dynamically -->
                </div>
            </div>
            <div class="modal-footer border-0">
                <button type="button" class="btn btn-light rounded-pill px-4" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary rounded-pill px-4" onclick="copyEmailTemplate()">
                    <i class="fas fa-copy me-2"></i>Copy Template
                </button>
            </div>
        </div>
    </div>
</div>

<!-- View Call Script Modal -->
<div class="modal fade" id="viewCallScriptModal" tabindex="-1">
    <div class="modal-dialog modal-lg modal-dialog-centered">
        <div class="modal-content border-0 shadow">
            <div class="modal-header border-0">
                <h5 class="modal-title fw-bold" id="viewCallScriptTitle"></h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body p-4">
                <div id="viewCallScriptContent">
                    <!-- Content will be loaded dynamically -->
                </div>
            </div>
            <div class="modal-footer border-0">
                <button type="button" class="btn btn-light rounded-pill px-4" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-success rounded-pill px-4" onclick="copyCallScript()">
                    <i class="fas fa-copy me-2"></i>Copy Script
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteConfirmationModal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content border-0 shadow">
            <div class="modal-header border-0">
                <h5 class="modal-title fw-bold">Confirm Delete</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body p-4">
                <div class="text-center mb-3">
                    <div class="text-danger mb-3">
                        <i class="fas fa-exclamation-triangle fa-3x"></i>
                    </div>
                    <p class="text-danger mb-1">Are you sure you want to delete this item?</p>
                    <p class="mb-3">This action cannot be undone.</p>
                    <div class="bg-light p-3 rounded-3">
                        <p class="mb-0 fw-bold" id="deleteItemName"></p>
                    </div>
                </div>
            </div>
            <div class="modal-footer border-0">
                <button type="button" class="btn btn-light rounded-pill px-4" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger rounded-pill px-4" onclick="confirmDelete()">
                    <i class="fas fa-trash me-2"></i>Delete
                </button>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <style>
        .required:after {
            content: " *";
            color: #dc3545;
        }

        .nav-pills .nav-link {
            color: #6c757d;
            background-color: transparent;
            border: 1px solid #dee2e6;
            border-radius: 50px;
            margin: 0 0.25rem;
            transition: all 0.3s ease;
        }

            .nav-pills .nav-link:hover {
                color: #2563EB;
                background-color: rgba(37, 99, 235, 0.1);
                border-color: #2563EB;
            }

            .nav-pills .nav-link.active {
                color: #fff;
                background-color: #2563EB;
                border-color: #2563EB;
            }

        .table-hover tbody tr {
            transition: transform 0.15s ease, box-shadow 0.15s ease;
        }

            .table-hover tbody tr:hover {
                transform: translateY(-1px);
                box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
                z-index: 1;
                position: relative;
            }
    </style>
}

@section Scripts {
    <script>
        let deleteAction = null;
        let deleteId = null;

        // Show create email template modal
        function showCreateEmailTemplateModal() {
            document.getElementById('createEmailTemplateForm').reset();
            const modal = new bootstrap.Modal(document.getElementById('createEmailTemplateModal'));
            modal.show();
        }

        // Show create call script modal
        function showCreateCallScriptModal() {
            document.getElementById('createCallScriptForm').reset();
            const modal = new bootstrap.Modal(document.getElementById('createCallScriptModal'));
            modal.show();
        }

        // Create email template
        async function createEmailTemplate() {
            const name = document.getElementById('emailTemplateName').value.trim();
            const subject = document.getElementById('emailTemplateSubject').value.trim();
            const body = document.getElementById('emailTemplateBody').value.trim();

            if (!name || !subject || !body) {
                showAlert('error', 'Please fill in all required fields');
                return;
            }

            try {
                // Create FormData object instead of JSON
                const formData = new FormData();
                formData.append('Template.Name', name);
                formData.append('Template.Description', document.getElementById('emailTemplateDescription').value.trim());
                formData.append('Template.Subject', subject);
                formData.append('Template.Body', body);
                formData.append('Template.Category', document.getElementById('emailTemplateCategory').value.trim());
                formData.append('Template.Tags', document.getElementById('emailTemplateTags').value.trim());

                // Add the anti-forgery token
                formData.append('__RequestVerificationToken', document.querySelector('input[name="__RequestVerificationToken"]').value);

                const response = await fetch('@Url.Action("CreateEmailTemplate", "TemplatesScripts")', {
                    method: 'POST',
                    body: formData // Send FormData, not JSON
                });

                if (response.ok) {
                    showAlert('success', 'Email template created successfully');
                    // Close the modal
                    bootstrap.Modal.getInstance(document.getElementById('createEmailTemplateModal')).hide();
                    // Reload the page to show the new template
                    location.reload();
                } else {
                    const errorText = await response.text();
                    throw new Error(`Failed to create template: ${response.status}`);
                }
            } catch (error) {
                console.error('Error creating email template:', error);
                showAlert('error', error.message || 'Failed to create email template');
            }
        }

                // Create call script
        async function createCallScript() {
            const name = document.getElementById('callScriptName').value.trim();
            const content = document.getElementById('callScriptContent').value.trim();

            if (!name || !content) {
                showAlert('error', 'Please fill in all required fields');
                return;
            }

            try {
                // Create FormData object instead of JSON
                const formData = new FormData();
                formData.append('Script.Name', name);
                formData.append('Script.Description', document.getElementById('callScriptDescription').value.trim());
                formData.append('Script.Content', content);
                formData.append('Script.ScriptType', document.getElementById('callScriptType').value.trim());
                formData.append('Script.Industry', document.getElementById('callScriptIndustry').value.trim());
                formData.append('Script.Tags', document.getElementById('callScriptTags').value.trim());

                const duration = document.getElementById('callScriptDuration').value;
                if (duration) {
                    formData.append('Script.EstimatedDuration', duration);
                }

                // Add the anti-forgery token
                formData.append('__RequestVerificationToken', document.querySelector('input[name="__RequestVerificationToken"]').value);

                const response = await fetch('@Url.Action("CreateCallScript", "TemplatesScripts")', {
                    method: 'POST',
                    body: formData // Send FormData, not JSON
                });

                if (response.ok) {
                    showAlert('success', 'Call script created successfully');
                    // Close the modal
                    bootstrap.Modal.getInstance(document.getElementById('createCallScriptModal')).hide();
                    // Reload the page to show the new script
                    location.reload();
                } else {
                    const errorText = await response.text();
                    throw new Error(`Failed to create script: ${response.status}`);
                }
            } catch (error) {
                console.error('Error creating call script:', error);
                showAlert('error', error.message || 'Failed to create call script');
            }
        }

        // View email template
        async function viewEmailTemplate(id) {
            try {
                const response = await fetch(`@Url.Action("GetEmailTemplate", "TemplatesScripts")?id=${id}`);
                if (response.ok) {
                    const template = await response.json();
                    document.getElementById('viewEmailTemplateTitle').textContent = template.name;
                    document.getElementById('viewEmailTemplateContent').innerHTML = `
                        <div class="mb-3">
                            <h6 class="fw-bold">Subject:</h6>
                            <p class="text-muted">${template.subject}</p>
                        </div>
                        <div class="mb-3">
                            <h6 class="fw-bold">Category:</h6>
                            <p class="text-muted">${template.category || 'Not specified'}</p>
                        </div>
                        <div class="mb-3">
                            <h6 class="fw-bold">Description:</h6>
                            <p class="text-muted">${template.description || 'No description provided'}</p>
                        </div>
                        <div class="mb-3">
                            <h6 class="fw-bold">Email Body:</h6>
                            <div class="bg-light p-3 rounded-3" style="max-height: 300px; overflow-y: auto;">
                                <pre class="mb-0">${template.body}</pre>
                            </div>
                        </div>
                        ${template.tags ? `<div class="mb-3">
                            <h6 class="fw-bold">Tags:</h6>
                            <p class="text-muted">${template.tags}</p>
                        </div>` : ''}
                    `;

                    const modal = new bootstrap.Modal(document.getElementById('viewEmailTemplateModal'));
                    modal.show();
                } else {
                    throw new Error('Failed to load template');
                }
            } catch (error) {
                showAlert('error', error.message || 'Failed to view email template');
            }
        }

        // View call script
        async function viewCallScript(id) {
            try {
                const response = await fetch(`@Url.Action("GetCallScript", "TemplatesScripts")?id=${id}`);
                if (response.ok) {
                    const script = await response.json();
                    document.getElementById('viewCallScriptTitle').textContent = script.name;
                    document.getElementById('viewCallScriptContent').innerHTML = `
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <h6 class="fw-bold">Type:</h6>
                                <p class="text-muted">${script.scriptType || 'Not specified'}</p>
                            </div>
                            <div class="col-md-6">
                                <h6 class="fw-bold">Estimated Duration:</h6>
                                <p class="text-muted">${script.estimatedDuration ? script.estimatedDuration + ' minutes' : 'Not specified'}</p>
                            </div>
                        </div>
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <h6 class="fw-bold">Industry:</h6>
                                <p class="text-muted">${script.industry || 'Not specified'}</p>
                            </div>
                            <div class="col-md-6">
                                <h6 class="fw-bold">Tags:</h6>
                                <p class="text-muted">${script.tags || 'No tags'}</p>
                            </div>
                        </div>
                        <div class="mb-3">
                            <h6 class="fw-bold">Description:</h6>
                            <p class="text-muted">${script.description || 'No description provided'}</p>
                        </div>
                        <div class="mb-3">
                            <h6 class="fw-bold">Script Content:</h6>
                            <div class="bg-light p-3 rounded-3" style="max-height: 400px; overflow-y: auto;">
                                <pre class="mb-0">${script.content}</pre>
                            </div>
                        </div>
                    `;

                    const modal = new bootstrap.Modal(document.getElementById('viewCallScriptModal'));
                    modal.show();
                } else {
                    throw new Error('Failed to load script');
                }
            } catch (error) {
                showAlert('error', error.message || 'Failed to view call script');
            }
        }

        // Delete confirmations
        function confirmDeleteEmailTemplate(id, name) {
            deleteAction = 'email-template';
            deleteId = id;
            document.getElementById('deleteItemName').textContent = name;
            const modal = new bootstrap.Modal(document.getElementById('deleteConfirmationModal'));
            modal.show();
        }

        function confirmDeleteCallScript(id, name) {
            deleteAction = 'call-script';
            deleteId = id;
            document.getElementById('deleteItemName').textContent = name;
            const modal = new bootstrap.Modal(document.getElementById('deleteConfirmationModal'));
            modal.show();
        }

        // Confirm delete
        async function confirmDelete() {
            try {
                let url;
                if (deleteAction === 'email-template') {
                    url = `@Url.Action("DeleteEmailTemplate", "TemplatesScripts")/${deleteId}`;
                } else if (deleteAction === 'call-script') {
                    url = `@Url.Action("DeleteCallScript", "TemplatesScripts")/${deleteId}`;
                }

                const response = await fetch(url, {
                    method: 'POST',
                    headers: {
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    }
                });

                const result = await response.json();
                if (result.success) {
                    showAlert('success', 'Item deleted successfully');
                    location.reload();
                } else {
                    throw new Error(result.message);
                }
            } catch (error) {
                showAlert('error', error.message || 'Failed to delete item');
            }
        }

        // Copy template/script to clipboard
        function copyEmailTemplate() {
            const content = document.querySelector('#viewEmailTemplateContent pre');
            if (content) {
                navigator.clipboard.writeText(content.textContent).then(() => {
                    showAlert('success', 'Email template copied to clipboard');
                }).catch(() => {
                    showAlert('error', 'Failed to copy template');
                });
            }
        }

        function copyCallScript() {
            const content = document.querySelector('#viewCallScriptContent pre');
            if (content) {
                navigator.clipboard.writeText(content.textContent).then(() => {
                    showAlert('success', 'Call script copied to clipboard');
                }).catch(() => {
                    showAlert('error', 'Failed to copy script');
                });
            }
        }

        // Filter handling
        function applyFilters() {
            const searchTerm = document.getElementById('searchInput').value.trim();
            const categoryFilter = document.getElementById('categoryFilter').value;
            const activeTab = document.querySelector('#templatesScriptsTabs .nav-link.active').getAttribute('data-bs-target').replace('#', '');

            let url = '@Url.Action("Index", "TemplatesScripts")';
            const params = new URLSearchParams();

            if (searchTerm) params.append('searchTerm', searchTerm);
            if (categoryFilter) {
                if (activeTab === 'email-templates') {
                    params.append('categoryFilter', categoryFilter);
                } else {
                    params.append('typeFilter', categoryFilter);
                }
            }
            params.append('activeTab', activeTab);

            if (params.toString()) {
                url += '?' + params.toString();
            }

            window.location.href = url;
        }

        function resetFilters() {
            const activeTab = document.querySelector('#templatesScriptsTabs .nav-link.active').getAttribute('data-bs-target').replace('#', '');
            window.location.href = '@Url.Action("Index", "TemplatesScripts")?activeTab=' + activeTab;
        }

        // Show alerts
        function showAlert(type, message) {
            const alertDiv = document.createElement('div');
            alertDiv.classList.add('alert', `alert-${type === 'error' ? 'danger' : type}`, 'alert-dismissible', 'fade', 'show', 'position-fixed', 'top-0', 'end-0', 'm-3', 'rounded-3');
            alertDiv.style.zIndex = '9999';

            const icon = type === 'success' ? 'check-circle' : 'exclamation-circle';

            alertDiv.innerHTML = `
                <div class="d-flex align-items-center">
                    <i class="fas fa-${icon} me-2"></i>
                    ${message}
                </div>
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
            document.body.appendChild(alertDiv);
            setTimeout(() => alertDiv.remove(), 5000);
        }

        // Initialize event listeners
        document.addEventListener('DOMContentLoaded', function() {
            const searchInput = document.getElementById('searchInput');
            const categoryFilter = document.getElementById('categoryFilter');

            // Add debounced search
            let searchTimeout;
            searchInput.addEventListener('input', function() {
                clearTimeout(searchTimeout);
                searchTimeout = setTimeout(applyFilters, 500);
            });

            // Add filter change handler
            categoryFilter.addEventListener('change', applyFilters);

            // Tab change handler to update filter options
            document.querySelectorAll('#templatesScriptsTabs .nav-link').forEach(tab => {
                tab.addEventListener('click', function() {
                    const targetTab = this.getAttribute('data-bs-target').replace('#', '');
                    updateFilterOptions(targetTab);
                });
            });

            // Initialize filter options based on active tab
            const activeTab = document.querySelector('#templatesScriptsTabs .nav-link.active').getAttribute('data-bs-target').replace('#', '');
            updateFilterOptions(activeTab);
        });

        function updateFilterOptions(activeTab) {
            const categoryFilter = document.getElementById('categoryFilter');
            categoryFilter.innerHTML = '<option value="">All Categories/Types</option>';

            // You can populate these dynamically from the server if needed
            if (activeTab === 'email-templates') {
                // Add email template categories
                const categories = @Html.Raw(Json.Serialize(Model.EmailTemplates.Select(t => t.Category).Distinct().Where(c => !string.IsNullOrEmpty(c)).ToList()));
                categories.forEach(category => {
                    const option = document.createElement('option');
                    option.value = category;
                    option.textContent = category;
                    categoryFilter.appendChild(option);
                });
            } else if (activeTab === 'call-scripts') {
                // Add call script types
                const types = @Html.Raw(Json.Serialize(Model.CallScripts.Select(s => s.ScriptType).Distinct().Where(t => !string.IsNullOrEmpty(t)).ToList()));
                types.forEach(type => {
                    const option = document.createElement('option');
                    option.value = type;
                    option.textContent = type;
                    categoryFilter.appendChild(option);
                });
            }
        }
    </script>
}